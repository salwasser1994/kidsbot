# bot.py
import asyncio
import json
import random
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
API_TOKEN = "7174011610:AAGGjDniBS_D1HE_aGSxPA9M6mrGCZOeqNM"  # <- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –û—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª ===
POINTS_FILE = Path("points.json")

def load_points():
    if POINTS_FILE.exists():
        with open(POINTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_points():
    with open(POINTS_FILE, "w", encoding="utf-8") as f:
        json.dump(points, f, ensure_ascii=False, indent=2)

points = load_points()

# === –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã (–≤ –ø–∞–º—è—Ç–∏) ===
# –î–ª—è "—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ" —Ö—Ä–∞–Ω–∏–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
guess_number_games: dict[str, int] = {}
# –î–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å id (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–µ–π—á–∞—Å)
active_quiz: dict[str, int] = {}

# === –ü—Ä–æ—Ñ–∏–ª–∏ ===
profiles = {
    "–ê–ª–∏—Å–∞": {
        "birthday": "2016-06-19",
        "greetings": "–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ –ê–ª–∏—Å–∞ ‚ú®!",
        "facts": [
            "–ê–ª–∏—Å–∞ —É–º–µ–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø–∞–∑–ª—ã üß©",
            "–ê–ª–∏—Å–∞ –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üê±",
            "–ê–ª–∏—Å–∞ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Å–ª–æ–Ω—ã –±–æ—è—Ç—Å—è –º—ã—à–µ–π üêòüê≠"
        ],
        "jokes": [
            "–ü–æ—á–µ–º—É –∫–Ω–∏–≥–∞ –ø–æ—à–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ—ë —Å–ª–æ–º–∞–ª–∞—Å—å –æ–±–ª–æ–∂–∫–∞ üìöüòÇ",
            "–ö—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç? –ó–∞–≤—Ç—Ä–∞ ‚è≥",
            "–ü–æ—á–µ–º—É –∫–∞—Ä–∞–Ω–¥–∞—à –≥—Ä—É—Å—Ç–Ω—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–æ—á–∏–ª–∫–∏ ‚úèÔ∏èüò¢"
        ],
        "tasks": [
            "–ê–ª–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–π 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å—Ç–æ—è—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–∂–∫–µ ü¶∂",
            "–°–º–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å 5 —Ñ—Ä—É–∫—Ç–æ–≤ –∑–∞ 15 —Å–µ–∫—É–Ω–¥? üçéüçåüçáüçäüçì",
            "–ü—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤ –ë, –ö –∏ –õ!"
        ]
    },
    "–†—É—Å–ª–∞–Ω": {
        "birthday": "2014-10-04",
        "greetings": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –†—É—Å–ª–∞–Ω üöÄ!",
        "facts": [
            "–†—É—Å–ª–∞–Ω ‚Äî —á–µ–º–ø–∏–æ–Ω –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É –±–µ–≥—É –Ω–∞ –º–µ—Å—Ç–µ üèÉ",
            "–†—É—Å–ª–∞–Ω –æ–±–æ–∂–∞–µ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ ü¶ñ",
            "–†—É—Å–ª–∞–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ —É –∞–∫—É–ª—ã –±–æ–ª–µ–µ 300 –∑—É–±–æ–≤ ü¶à"
        ],
        "jokes": [
            "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—à—ë–ª –≤ —à–∫–æ–ª—É? –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É–º–Ω–µ–µ ü§ì",
            "–ö–∞–∫–∞—è —Ä—ã–±–∞ –Ω–µ —É–º–µ–µ—Ç –ø–ª–∞–≤–∞—Ç—å? –ñ–∞—Ä–µ–Ω–∞—è üêü",
            "–ü–æ—á–µ–º—É –≤–µ–ª–æ—Å–∏–ø–µ–¥ —É–ø–∞–ª? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É—Å—Ç–∞–ª üö≤üòÇ"
        ],
        "tasks": [
            "–†—É—Å–ª–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–¥—É–º–∞—Ç—å —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É '—à–∫–æ–ª–∞' üéì",
            "–°–º–æ–∂–µ—à—å –∑–∞ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–≤–∞—Ç—å 5 –∂–∏–≤–æ—Ç–Ω—ã—Ö? üê∂üê±üê∞üêØüê¥",
            "–ü–æ–ø—Ä—ã–≥–∞–π 7 —Ä–∞–∑ –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ –∫–µ–Ω–≥—É—Ä—É ü¶ò"
        ]
    }
}

# === –û–±—â–∏–µ –¥–∞—Ç—ã ===
common_dates = {
    "new_year": "2026-01-01",
    "summer_holidays": "2026-06-01"
}

# === user_id ‚Üí –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ id) ===
# –ü—Ä–∏–º–µ—Ä:
# user_to_name = {
#     111111111: "–ê–ª–∏—Å–∞",
#     222222222: "–†—É—Å–ª–∞–Ω"
# }
user_to_name: dict[int, str] = {
    # <-- —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ user_id
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===
def days_until(date_str: str) -> int:
    today = datetime.today().date()
    target = datetime.strptime(date_str, "%Y-%m-%d").date()
    delta = (target - today).days
    return delta if delta >= 0 else (target.replace(year=today.year + 1) - today).days

def get_points(user_id: int) -> int:
    return points.get(str(user_id), 0)

def add_point(user_id: int, value: int = 1):
    points[str(user_id)] = get_points(user_id) + value
    save_points()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz")],
        [InlineKeyboardButton(text="üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="guessnum_start")],
        [InlineKeyboardButton(text="‚úä‚úã‚úåÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data="rps_start")],
        [InlineKeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="surprise")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="fact")],
        [InlineKeyboardButton(text="üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton(text="üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ...", callback_data="days")],
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –æ—á–∫–∏", callback_data="points")],
        [InlineKeyboardButton(text="üôã –ö—Ç–æ —è", callback_data="whoami")]
    ])

def days_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã", callback_data="days_alice")],
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞", callback_data="days_ruslan")],
        [InlineKeyboardButton(text="üéÑ –ù–æ–≤—ã–π –≥–æ–¥", callback_data="days_newyear")],
        [InlineKeyboardButton(text="‚òÄÔ∏è –ö–∞–Ω–∏–∫—É–ª—ã", callback_data="days_holidays")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    name = user_to_name.get(message.from_user.id)
    if name:
        profile = profiles[name]
        await message.answer(
            f"{profile['greetings']}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–µ–±—è. –ü–æ–ø—Ä–æ—Å–∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–π user_id –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞."
        )

@dp.callback_query(F.data == "main_menu")
async def go_main(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    else:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï")
    await callback.answer()

# === –ö—Ç–æ —è ===
@dp.callback_query(F.data == "whoami")
async def who_am_i(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        profile = profiles[name]
        text = (
            f"–¢—ã ‚Äî {name} üéâ\n"
            f"üìÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birthday']}\n"
            f"üéØ –û—á–∫–æ–≤: {get_points(callback.from_user.id)}\n"
            f"üí° –ù–∞–ø—Ä–∏–º–µ—Ä: {profile['facts'][0]}"
        )
        await callback.message.answer(text, reply_markup=back_menu())
    else:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï", reply_markup=back_menu())
    await callback.answer()

# === –§–∞–∫—Ç ===
@dp.callback_query(F.data == "fact")
async def fact(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        fact_text = random.choice(profiles[name]["facts"])
        await callback.message.answer(fact_text, reply_markup=back_menu())
    else:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï", reply_markup=back_menu())
    await callback.answer()

# === –ê–Ω–µ–∫–¥–æ—Ç ===
@dp.callback_query(F.data == "joke")
async def joke(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        joke_text = random.choice(profiles[name]["jokes"])
        await callback.message.answer(joke_text, reply_markup=back_menu())
    else:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï", reply_markup=back_menu())
    await callback.answer()

# === –ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è ===
@dp.callback_query(F.data == "tasks")
async def task(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        task_text = random.choice(profiles[name]["tasks"])
        add_point(callback.from_user.id, 1)
        await callback.message.answer(task_text, reply_markup=back_menu())
        await callback.message.answer(
            f"–¢—ã –ø–æ–ª—É—á–∏–ª 1 –æ—á–∫–æ! üéØ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {get_points(callback.from_user.id)}",
            reply_markup=back_menu()
        )
    else:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï", reply_markup=back_menu())
    await callback.answer()

# === –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===
quiz_questions = [
    {"q": "–°–∫–æ–ª—å–∫–æ –Ω–æ–≥ —É –ø–∞—É–∫–∞?", "options": ["6", "8", "10"], "answer_index": 1},
    {"q": "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±–∞–Ω–∞–Ω?", "options": ["–ö—Ä–∞—Å–Ω—ã–π", "–ñ—ë–ª—Ç—ã–π", "–°–∏–Ω–∏–π"], "answer_index": 1},
    {"q": "–ö—Ç–æ –≥—Ä–æ–º—á–µ –≤—Å–µ—Ö –∫—É–∫–∞—Ä–µ–∫–∞–µ—Ç?", "options": ["–ö—É—Ä–∏—Ü–∞", "–ü–µ—Ç—É—Ö", "–£—Ç–∫–∞"], "answer_index": 1},
]

@dp.callback_query(F.data == "quiz")
async def quiz_start(callback: types.CallbackQuery):
    qid = random.randrange(len(quiz_questions))
    active_quiz[str(callback.from_user.id)] = qid
    q = quiz_questions[qid]
    buttons = []
    for idx, opt in enumerate(q["options"]):
        buttons.append([InlineKeyboardButton(text=opt, callback_data=f"quiz:{qid}:{idx}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(q["q"], reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("quiz:"))
async def quiz_answer(callback: types.CallbackQuery):
    data = callback.data.split(":")
    if len(data) != 3:
        await callback.answer()
        return
    qid = int(data[1]); chosen_idx = int(data[2])
    q = quiz_questions[qid]
    correct_idx = q["answer_index"]
    if chosen_idx == correct_idx:
        add_point(callback.from_user.id, 2)
        await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ +2 –æ—á–∫–∞!", reply_markup=back_menu())
    else:
        correct_text = q["options"][correct_idx]
        await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}", reply_markup=back_menu())
    await callback.answer()

# === –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ ===
def make_guessnum_kb():
    rows = []
    # –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ 1..10 (–ø–æ 5 –≤ —Ä—è–¥)
    for i in range(1, 11):
        rows.append(InlineKeyboardButton(text=str(i), callback_data=f"guessnum_choice:{i}"))
    # InlineKeyboardMarkup —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ -> —Ä–∞–∑–æ–±—å—ë–º –ø–æ 5
    keyboard = InlineKeyboardMarkup(row_width=5)
    keyboard.add(*[InlineKeyboardButton(text=str(i), callback_data=f"guessnum_choice:{i}") for i in range(1, 11)])
    # –¥–æ–±–∞–≤–∏–º –Ω–∞–∑–∞–¥
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

@dp.callback_query(F.data == "guessnum_start")
async def guessnum_start(callback: types.CallbackQuery):
    # –∑–∞–≥–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ 1..10
    secret = random.randint(1, 10)
    guess_number_games[str(callback.from_user.id)] = secret
    await callback.message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!", reply_markup=make_guessnum_kb())
    await callback.answer()

@dp.callback_query(F.data.startswith("guessnum_choice:"))
async def guessnum_choice(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id not in guess_number_games:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.", reply_markup=back_menu())
        await callback.answer()
        return
    try:
        chosen = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer()
        return
    secret = guess_number_games.pop(user_id, None)
    if secret is None:
        await callback.message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=back_menu())
    else:
        if chosen == secret:
            add_point(callback.from_user.id, 3)
            await callback.message.answer(f"–£—Ä–∞! –¢—ã —É–≥–∞–¥–∞–ª(–∞) ‚Äî —ç—Ç–æ {secret}! üéâ +3 –æ—á–∫–∞!", reply_markup=back_menu())
        else:
            await callback.message.answer(f"–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ ‚Äî —è –∑–∞–≥–∞–¥–∞–ª(–∞) {secret}.", reply_markup=back_menu())
    await callback.answer()

# === –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ ===
def rps_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data="rps:rock"),
         InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data="rps:paper"),
         InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps:scissors")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

@dp.callback_query(F.data == "rps_start")
async def rps_start(callback: types.CallbackQuery):
    await callback.message.answer("–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞! –í—ã–±–∏—Ä–∞–π:", reply_markup=rps_kb())
    await callback.answer()

@dp.callback_query(F.data.startswith("rps:"))
async def rps_play(callback: types.CallbackQuery):
    try:
        user_choice = callback.data.split(":")[1]
    except Exception:
        await callback.answer()
        return
    bot_choice = random.choice(["rock", "paper", "scissors"])
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    outcome = None  # "win", "lose", "draw"
    if user_choice == bot_choice:
        outcome = "draw"
    elif (user_choice == "rock" and bot_choice == "scissors") or \
         (user_choice == "paper" and bot_choice == "rock") or \
         (user_choice == "scissors" and bot_choice == "paper"):
        outcome = "win"
    else:
        outcome = "lose"

    emoji_name = {"rock": "‚úä –ö–∞–º–µ–Ω—å", "paper": "‚úã –ë—É–º–∞–≥–∞", "scissors": "‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã"}

    if outcome == "win":
        add_point(callback.from_user.id, 2)
        await callback.message.answer(f"–Ø –≤—ã–±—Ä–∞–ª(–∞) {emoji_name[bot_choice]}. –¢—ã –ø–æ–±–µ–¥–∏–ª(–∞)! üéâ +2 –æ—á–∫–∞!", reply_markup=back_menu())
    elif outcome == "lose":
        await callback.message.answer(f"–Ø –≤—ã–±—Ä–∞–ª(–∞) {emoji_name[bot_choice]}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! üòä", reply_markup=back_menu())
    else:
        await callback.message.answer(f"–ú—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ {emoji_name[bot_choice]}. –ù–∏—á—å—è! ü§ù", reply_markup=back_menu())
    await callback.answer()

# === –°—é—Ä–ø—Ä–∏–∑ ===
@dp.callback_query(F.data == "surprise")
async def surprise(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if not name:
        await callback.message.answer("–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üòï", reply_markup=back_menu())
        await callback.answer()
        return

    choice = random.choice(["fact", "joke", "task", "mini_quiz"])
    if choice == "fact":
        text = random.choice(profiles[name]["facts"])
        await callback.message.answer("üéâ –°—é—Ä–ø—Ä–∏–∑ ‚Äî —Ñ–∞–∫—Ç:\n" + text, reply_markup=back_menu())
    elif choice == "joke":
        text = random.choice(profiles[name]["jokes"])
        await callback.message.answer("üéâ –°—é—Ä–ø—Ä–∏–∑ ‚Äî —à—É—Ç–∫–∞:\n" + text, reply_markup=back_menu())
    elif choice == "task":
        text = random.choice(profiles[name]["tasks"])
        add_point(callback.from_user.id, 1)
        await callback.message.answer("üéâ –°—é—Ä–ø—Ä–∏–∑ ‚Äî –∑–∞–¥–∞–Ω–∏–µ:\n" + text, reply_markup=back_menu())
        await callback.message.answer(f"–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) 1 –æ—á–∫–æ! üéØ –í—Å–µ–≥–æ: {get_points(callback.from_user.id)}", reply_markup=back_menu())
    elif choice == "mini_quiz":
        # –±—ã—Å—Ç—Ä–∞—è –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ (1 –≤–æ–ø—Ä–æ—Å)
        q = random.choice(quiz_questions)
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ü–∏–∏ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏, –Ω–æ –ø–æ–º–µ—Ç–∏–º callback –∫–∞–∫ quickquiz so it won't interfere
        buttons = []
        for idx, opt in enumerate(q["options"]):
            buttons.append([InlineKeyboardButton(text=opt, callback_data=f"quickquiz:{q['q']}:{idx}:{q['answer_index']}")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üéâ –°—é—Ä–ø—Ä–∏–∑ ‚Äî –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:\n" + q["q"], reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("quickquiz:"))
async def quickquiz_answer(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç quickquiz:question_text:chosen_idx:correct_idx
    parts = callback.data.split(":", 3)
    if len(parts) < 4:
        await callback.answer()
        return
    _, q_text, chosen_idx, correct_idx = parts
    chosen_idx = int(chosen_idx); correct_idx = int(correct_idx)
    if chosen_idx == correct_idx:
        add_point(callback.from_user.id, 2)
        await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ +2 –æ—á–∫–∞!", reply_markup=back_menu())
    else:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è! üòä", reply_markup=back_menu())
    await callback.answer()

# === –û—á–∫–∏ ===
@dp.callback_query(F.data == "points")
async def points_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        f"–£ —Ç–µ–±—è {get_points(callback.from_user.id)} –æ—á–∫–æ–≤ üéØ",
        reply_markup=back_menu()
    )
    await callback.answer()

# === –î–Ω–∏ ===
@dp.callback_query(F.data == "days")
async def days(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=days_menu())
    await callback.answer()

@dp.callback_query(F.data.startswith("days_"))
async def days_event(callback: types.CallbackQuery):
    data = callback.data
    if data == "days_alice":
        target = profiles["–ê–ª–∏—Å–∞"]["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_ruslan":
        target = profiles["–†—É—Å–ª–∞–Ω"]["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞ üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_newyear":
        target = common_dates["new_year"]
        text = f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ üéÑ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_holidays":
        target = common_dates["summer_holidays"]
        text = f"–î–æ –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª ‚òÄÔ∏è –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ."
    await callback.message.answer(text, reply_markup=back_menu())
    await callback.answer()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
