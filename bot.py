import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

API_TOKEN = "7174011610:AAGGjDniBS_D1HE_aGSxPA9M6mrGCZOeqNM"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # Aiogram 3.x: Dispatcher –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

# === –î–ï–¢–ò ===
users = {
    "–†—É—Å–ª–∞–Ω": {"id": 7894501725, "birthday": "2014-10-04", "points": 0},
    "–ê–ª–∏—Å–∞": {"id": 7719485802, "birthday": "2016-06-19", "points": 0},
    "–¢–æ–º–∞—Å": {"id": 5205381793, "birthday": "1994-04-27", "points": 0},
}

# === –í–ò–ö–¢–û–†–ò–ù–ê (–ø—Ä–∏–º–µ—Ä ‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—É—Ç) ===
quiz_questions = [
    ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–†–∏–º"], "–ü–∞—Ä–∏–∂"),
    ("–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?", ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–í–æ–ª–≥–∞", "–Ø–Ω—Ü–∑—ã"], "–ù–∏–ª"),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø—É—Ç–Ω–∏–∫ –ó–µ–º–ª–∏?", ["–ú–∞—Ä—Å", "–õ—É–Ω–∞", "–í–µ–Ω–µ—Ä–∞", "–°–∞—Ç—É—Ä–Ω"], "–õ—É–Ω–∞"),
    # ... (–¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)
]

# === –ú–ï–ù–Æ ===
def main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="menu_games"),
                InlineKeyboardButton(text="üìö –£—á—ë–±–∞", callback_data="menu_study"),
                InlineKeyboardButton(text="üìñ –°–∫–∞–∑–∫–∏", callback_data="menu_fairytales")
            ],
            [
                InlineKeyboardButton(text="üèÜ –ú–æ–∏ –æ—á–∫–∏", callback_data="points"),
                InlineKeyboardButton(text="üë§ –ö—Ç–æ —è", callback_data="whoami")
            ],
            [
                InlineKeyboardButton(text="üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ...", callback_data="birthday")
            ]
        ]
    )

def back_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
        ]
    )

def get_child(user_id: int):
    for name, data in users.items():
        if data["id"] == user_id:
            return name
    return None

# === –ê–Ω–∏–º–∞—Ü–∏—è –æ—á–∫–æ–≤ ===
async def animate_points(message: Message, user_name: str, old_points: int, new_points: int, prefix_text=""):
    displayed_points = max(0, old_points)
    target_points = max(0, new_points)
    step = max(1, abs(target_points - displayed_points) // 10 or 1)

    last_text = None
    while displayed_points != target_points:
        if displayed_points < target_points:
            displayed_points += step
            if displayed_points > target_points:
                displayed_points = target_points
        else:
            displayed_points -= step
            if displayed_points < target_points:
                displayed_points = target_points

        text_to_show = f"{prefix_text}üèÜ {user_name}, —É —Ç–µ–±—è {displayed_points} –æ—á–∫–æ–≤!"
        if text_to_show != last_text:
            try:
                await message.edit_text(text_to_show)
            except TelegramBadRequest as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "message is not modified"
                if "message is not modified" not in str(e):
                    raise
            last_text = text_to_show

        await asyncio.sleep(0.05)

# === –ê–ö–¢–ò–í–ù–´–ï –ò–ì–†–´ ===
active_quiz = {}  # user_id: {"question_index": int, "questions": list, "last_text": Message}

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(F.text)
async def start_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query(F.data == "back")
async def back(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in active_quiz:
        del active_quiz[user_id]
    try:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except TelegramBadRequest:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        pass

@dp.callback_query(F.data == "menu_games")
async def menu_games(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz_start")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    try:
        await callback.message.edit_text("üéÆ –ò–≥—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏:", reply_markup=kb)
    except TelegramBadRequest:
        pass

@dp.callback_query(F.data == "points")
async def show_points(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_name = get_child(user_id)
    if not user_name:
        await callback.message.edit_text("–¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏.", reply_markup=back_menu())
        return

    old_points = 0
    new_points = users[user_name]["points"]
    try:
        await callback.message.edit_text("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–∫–∏...", reply_markup=back_menu())
    except TelegramBadRequest:
        pass
    await animate_points(callback.message, user_name, old_points, new_points)

# === –í–ò–ö–¢–û–†–ò–ù–ê ===
@dp.callback_query(F.data == "quiz_start")
async def start_quiz(callback: CallbackQuery):
    user_name = get_child(callback.from_user.id)
    if not user_name:
        await callback.message.edit_text("–ò–≥—Ä–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∏.", reply_markup=back_menu())
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="quiz_begin")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    try:
        await callback.message.edit_text(
            f"üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞!\n\n–ü—Ä–∞–≤–∏–ª–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +1 –æ—á–∫–æ\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: -1 –æ—á–∫–æ\n–£–¥–∞—á–∏, {user_name}!",
            reply_markup=kb
        )
    except TelegramBadRequest:
        pass

@dp.callback_query(F.data == "quiz_begin")
async def begin_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    questions = quiz_questions.copy()
    random.shuffle(questions)
    active_quiz[user_id] = {"question_index": 0, "questions": questions, "last_text": callback.message}
    await send_quiz_question(user_id, callback.message.chat.id)

async def send_quiz_question(user_id, chat_id, result_text=""):
    quiz = active_quiz.get(user_id)
    if not quiz:
        return

    q_index = quiz["question_index"]

    # –ö–æ–Ω–µ—Ü –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if q_index >= len(quiz["questions"]):
        final_text = f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–∏ –æ—á–∫–∏: {users[get_child(user_id)]['points']}"
        try:
            await quiz["last_text"].edit_text(final_text, reply_markup=back_menu())
        except TelegramBadRequest:
            pass
        del active_quiz[user_id]
        return

    question, options, answer = quiz["questions"][q_index]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=opt, callback_data=f"quiz_ans:{i}")] for i, opt in enumerate(options)]
                     + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]]
    )

    text = f"{result_text}\n–í–æ–ø—Ä–æ—Å {q_index + 1}: {question}" if result_text else f"–í–æ–ø—Ä–æ—Å {q_index + 1}: {question}"

    try:
        await quiz["last_text"].edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "message is not modified"
        if "message is not modified" not in str(e):
            raise

@dp.callback_query(F.data.startswith("quiz_ans:"))
async def quiz_answer(callback: CallbackQuery):
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
    await callback.answer()

    user_id = callback.from_user.id
    if user_id not in active_quiz:
        await callback.message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        return

    quiz = active_quiz[user_id]
    q_index = quiz["question_index"]
    question, options, correct_answer = quiz["questions"][q_index]
    chosen_index = int(callback.data.split(":")[1])
    chosen_answer = options[chosen_index]

    user_name = get_child(user_id)
    old_points = users[user_name]["points"]

    if chosen_answer == correct_answer:
        users[user_name]["points"] += 1
        result_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –º–æ–ª–æ–¥–µ—Ü {user_name}!"
        quiz["question_index"] += 1  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    else:
        users[user_name]["points"] = max(0, users[user_name]["points"] - 1)
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, {user_name}! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        # question_index –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–Ω–æ–≤–∞

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç + –∞–Ω–∏–º–∏—Ä—É–µ–º –æ—á–∫–∏ (–≤–Ω—É—Ç—Ä–∏ animate_points –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ –±—ã–ª–æ ‚úÖ/‚ùå –∏ –ø–æ—Ç–æ–º —Å—á—ë—Ç)
        await animate_points(quiz["last_text"], user_name, old_points, users[user_name]["points"], prefix_text=result_text + "\n")
    except TelegramBadRequest:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        pass

    # –ñ–¥—ë–º —á—É—Ç—å-—á—É—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(0.6)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π (–∏–ª–∏ —Ç–æ—Ç –∂–µ) –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–¥–∞—ë–º result_text, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º
    await send_quiz_question(user_id, callback.message.chat.id, result_text=result_text)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
