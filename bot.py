import asyncio
import json
import random
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
API_TOKEN = "7174011610:AAGGjDniBS_D1HE_aGSxPA9M6mrGCZOeqNM"
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –û—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª ===
POINTS_FILE = Path("points.json")

def load_points():
    if POINTS_FILE.exists():
        with open(POINTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_points():
    with open(POINTS_FILE, "w", encoding="utf-8") as f:
        json.dump(points, f, ensure_ascii=False, indent=2)

points = load_points()

# === –î–ê–ù–ù–´–ï –ü–†–û–§–ò–õ–ï–ô ===
profiles = {
    "–ê–ª–∏—Å–∞": {
        "birthday": "2016-06-19",
        "greetings": "–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ –ê–ª–∏—Å–∞ ‚ú®!",
        "facts": [
            "–ê–ª–∏—Å–∞ —É–º–µ–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø–∞–∑–ª—ã üß©",
            "–ê–ª–∏—Å–∞ –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üê±",
            "–ê–ª–∏—Å–∞ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Å–ª–æ–Ω—ã –±–æ—è—Ç—Å—è –º—ã—à–µ–π üêòüê≠"
        ],
        "jokes": [
            "–ü–æ—á–µ–º—É –∫–Ω–∏–≥–∞ –ø–æ—à–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ—ë —Å–ª–æ–º–∞–ª–∞—Å—å –æ–±–ª–æ–∂–∫–∞ üìöüòÇ",
            "–ö—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç? –ó–∞–≤—Ç—Ä–∞ ‚è≥",
            "–ü–æ—á–µ–º—É –∫–∞—Ä–∞–Ω–¥–∞—à –≥—Ä—É—Å—Ç–Ω—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–æ—á–∏–ª–∫–∏ ‚úèÔ∏èüò¢"
        ],
        "tasks": [
            "–ê–ª–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–π 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å—Ç–æ—è—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–∂–∫–µ ü¶∂",
            "–°–º–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å 5 —Ñ—Ä—É–∫—Ç–æ–≤ –∑–∞ 15 —Å–µ–∫—É–Ω–¥? üçéüçåüçáüçäüçì",
            "–ü—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤ –ë, –ö –∏ –õ!"
        ]
    },
    "–†—É—Å–ª–∞–Ω": {
        "birthday": "2014-10-04",
        "greetings": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –†—É—Å–ª–∞–Ω üöÄ!",
        "facts": [
            "–†—É—Å–ª–∞–Ω ‚Äî —á–µ–º–ø–∏–æ–Ω –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É –±–µ–≥—É –Ω–∞ –º–µ—Å—Ç–µ üèÉ",
            "–†—É—Å–ª–∞–Ω –æ–±–æ–∂–∞–µ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ ü¶ñ",
            "–†—É—Å–ª–∞–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ —É –∞–∫—É–ª—ã –±–æ–ª–µ–µ 300 –∑—É–±–æ–≤ ü¶à"
        ],
        "jokes": [
            "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—à—ë–ª –≤ —à–∫–æ–ª—É? –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É–º–Ω–µ–µ ü§ì",
            "–ö–∞–∫–∞—è —Ä—ã–±–∞ –Ω–µ —É–º–µ–µ—Ç –ø–ª–∞–≤–∞—Ç—å? –ñ–∞—Ä–µ–Ω–∞—è üêü",
            "–ü–æ—á–µ–º—É –≤–µ–ª–æ—Å–∏–ø–µ–¥ —É–ø–∞–ª? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É—Å—Ç–∞–ª üö≤üòÇ"
        ],
        "tasks": [
            "–†—É—Å–ª–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–¥—É–º–∞—Ç—å —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É '—à–∫–æ–ª–∞' üéì",
            "–°–º–æ–∂–µ—à—å –∑–∞ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–≤–∞—Ç—å 5 –∂–∏–≤–æ—Ç–Ω—ã—Ö? üê∂üê±üê∞üêØüê¥",
            "–ü–æ–ø—Ä—ã–≥–∞–π 7 —Ä–∞–∑ –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ –∫–µ–Ω–≥—É—Ä—É ü¶ò"
        ]
    }
}

# === –û–±—â–∏–µ –¥–∞—Ç—ã ===
common_dates = {
    "new_year": "2026-01-01",
    "summer_holidays": "2026-06-01"
}

# === user_id ‚Üí –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ id) ===
user_to_name = {
   7719485802: "–ê–ª–∏—Å–∞",
    987654321: "–†—É—Å–ª–∞–Ω"
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def days_until(date_str: str) -> int:
    today = datetime.today().date()
    target = datetime.strptime(date_str, "%Y-%m-%d").date()
    delta = (target - today).days
    return delta if delta >= 0 else (target.replace(year=today.year + 1) - today).days

def get_points(user_id: int) -> int:
    return points.get(str(user_id), 0)

def add_point(user_id: int, value: int = 1):
    points[str(user_id)] = get_points(user_id) + value
    save_points()

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="fact")],
        [InlineKeyboardButton(text="üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton(text="üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ...", callback_data="days")],
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –æ—á–∫–∏", callback_data="points")],
        [InlineKeyboardButton(text="üôã –ö—Ç–æ —è", callback_data="whoami")]
    ])

def days_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã", callback_data="days_alice")],
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞", callback_data="days_ruslan")],
        [InlineKeyboardButton(text="üéÑ –ù–æ–≤—ã–π –≥–æ–¥", callback_data="days_newyear")],
        [InlineKeyboardButton(text="‚òÄÔ∏è –ö–∞–Ω–∏–∫—É–ª—ã", callback_data="days_holidays")]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    name = user_to_name.get(message.from_user.id)
    if name:
        profile = profiles[name]
        await message.answer(
            f"{profile['greetings']}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu()
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é ü§î")

@dp.callback_query(F.data == "whoami")
async def who_am_i(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        profile = profiles[name]
        text = (
            f"–¢—ã ‚Äî {name} üéâ\n"
            f"üìÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birthday']}\n"
            f"üéØ –û—á–∫–æ–≤: {get_points(callback.from_user.id)}\n"
            f"üí° –ù–∞–ø—Ä–∏–º–µ—Ä: {profile['facts'][0]}"
        )
        await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "fact")
async def fact(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        fact = random.choice(profiles[name]["facts"])
        await callback.message.answer(fact)
    await callback.answer()

@dp.callback_query(F.data == "joke")
async def joke(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        joke = random.choice(profiles[name]["jokes"])
        await callback.message.answer(joke)
    await callback.answer()

@dp.callback_query(F.data == "tasks")
async def task(callback: types.CallbackQuery):
    name = user_to_name.get(callback.from_user.id)
    if name:
        task = random.choice(profiles[name]["tasks"])
        add_point(callback.from_user.id, 1)
        await callback.message.answer(task)
        await callback.message.answer(
            f"–¢—ã –ø–æ–ª—É—á–∏–ª 1 –æ—á–∫–æ! üéØ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {get_points(callback.from_user.id)}"
        )
    await callback.answer()

@dp.callback_query(F.data == "points")
async def points_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        f"–£ —Ç–µ–±—è {get_points(callback.from_user.id)} –æ—á–∫–æ–≤ üéØ"
    )
    await callback.answer()

@dp.callback_query(F.data == "days")
async def days(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=days_menu())
    await callback.answer()

@dp.callback_query(F.data.startswith("days_"))
async def days_event(callback: types.CallbackQuery):
    data = callback.data

    if data == "days_alice":
        target = profiles["–ê–ª–∏—Å–∞"]["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_ruslan":
        target = profiles["–†—É—Å–ª–∞–Ω"]["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞ üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_newyear":
        target = common_dates["new_year"]
        text = f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ üéÑ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_holidays":
        target = common_dates["summer_holidays"]
        text = f"–î–æ –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª ‚òÄÔ∏è –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"

    await callback.message.answer(text)
    await callback.answer()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
