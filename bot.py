import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

# === –¢–û–ö–ï–ù –ë–û–¢–ê ===
API_TOKEN = "7174011610:AAGGjDniBS_D1HE_aGSxPA9M6mrGCZOeqNM"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –î–ï–¢–ò (user_id + –¥–∞–Ω–Ω—ã–µ) ===
users = {
    "–†—É—Å–ª–∞–Ω": {"id": 7894501725, "birthday": "2014-10-04", "points": 0},
    "–ê–ª–∏—Å–∞": {"id": 7719485802, "birthday": "2016-06-19", "points": 0},
    "–¢–æ–º–∞—Å": {"id": 5205381793, "birthday": "1994-04-27", "points": 0},
}

# === –í–ò–ö–¢–û–†–ò–ù–ê (50 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤) ===
quiz_questions = [
    ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–†–∏–º"], "–ü–∞—Ä–∏–∂"),
    ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?", ["3", "4", "5", "6"], "4"),
    ("–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?", ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–í–æ–ª–≥–∞", "–Ø–Ω—Ü–∑—ã"], "–ù–∏–ª"),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø—É—Ç–Ω–∏–∫ –ó–µ–º–ª–∏?", ["–ú–∞—Ä—Å", "–õ—É–Ω–∞", "–í–µ–Ω–µ—Ä–∞", "–°–∞—Ç—É—Ä–Ω"], "–õ—É–Ω–∞"),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", ["–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ì–æ–≥–æ–ª—å", "–ß–µ—Ö–æ–≤"], "–¢–æ–ª—Å—Ç–æ–π"),
    ("–°–∫–æ–ª—å–∫–æ –Ω–æ–≥ —É –ø–∞—É–∫–∞?", ["6", "8", "10", "12"], "8"),
    ("–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä"], "–ú–µ—Ä–∫—É—Ä–∏–π"),
    ("–ö–∞–∫–æ–π —Ü–≤–µ—Ç —É –º–æ—Ä–∫–æ–≤–∏?", ["–ö—Ä–∞—Å–Ω—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–ó–µ–ª—ë–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"], "–û—Ä–∞–Ω–∂–µ–≤—ã–π"),
    ("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Ä—É—Å—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ?", ["32", "33", "34", "31"], "33"),
    ("–ö—Ç–æ –∏–∑–æ–±—Ä—ë–ª –ª–∞–º–ø—É?", ["–≠–¥–∏—Å–æ–Ω", "–ù—å—é—Ç–æ–Ω", "–¢–µ—Å–ª–∞", "–î–∞—Ä–≤–∏–Ω"], "–≠–¥–∏—Å–æ–Ω"),
] * 5  # 50 –≤–æ–ø—Ä–æ—Å–æ–≤

# –£–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
asked_questions = {}

# === –ê–ù–ï–ö–î–û–¢–´ ===
jokes = [
    "‚Äî –ü–∞–ø–∞, –∞ –ø–æ—á–µ–º—É —Å–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞—ë—Ç –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ?\n‚Äî –û–¥–∏–Ω —Ä–∞–∑ –æ–ø–æ–∑–¥–∞–ª–æ –∏ –µ–≥–æ —É–≤–æ–ª–∏–ª–∏!",
    "–£—á–∏—Ç–µ–ª—å: –í–æ–≤–æ—á–∫–∞, –ø–æ—á–µ–º—É —Ç—ã –æ–ø–æ–∑–¥–∞–ª?\n–í–æ–≤–æ—á–∫–∞: –ê –≤—ã —Å–∞–º–∏ –≥–æ–≤–æ—Ä–∏–ª–∏ ‚Äî –ª—É—á—à–µ –ø–æ–∑–¥–Ω–æ, —á–µ–º –Ω–∏–∫–æ–≥–¥–∞!",
    "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –∫—Ä–æ–∫–æ–¥–∏–ª–∞: ‚Äî –¢—ã –≥–¥–µ –±—ã–ª? ‚Äî –í –ï–≥–∏–ø—Ç–µ. ‚Äî –ù—É –∏ –∫–∞–∫ —Ç–∞–º? ‚Äî –î–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –µ–≥–∏–ø—Ç—è–Ω–µ –≤—Å—ë –≤—Ä–µ–º—è –±–µ–≥–∞—é—Ç –∏ –∫—Ä–∏—á–∞—Ç: '–ö—Ä–æ–∫–æ–¥–∏–ª! –ö—Ä–æ–∫–æ–¥–∏–ª!'"
]

# === –°–ö–ê–ó–ö–ò ===
fairytales = [
    "–ñ–∏–ª-–±—ã–ª –∫–æ–ª–æ–±–æ–∫. –û–Ω —É–±–µ–∂–∞–ª –æ—Ç –±–∞–±—É—à–∫–∏, –¥–µ–¥—É—à–∫–∏, –Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª –ª–∏—Å—É... ü¶ä",
    "–í —Ç—Ä–∏–¥–µ–≤—è—Ç–æ–º —Ü–∞—Ä—Å—Ç–≤–µ –∂–∏–ª–∞-–±—ã–ª–∞ –í–∞—Å–∏–ª–∏—Å–∞ –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è... üë∏",
    "–ñ–∏–ª-–±—ã–ª –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–∞–∫–æ–Ω—á–∏–∫. –û–Ω –±–æ—è–ª—Å—è –ª–µ—Ç–∞—Ç—å, –Ω–æ –æ–¥–Ω–∞–∂–¥—ã... üêâ"
]

# === –ó–ê–ì–ê–î–ö–ò ===
riddles = [
    ("–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?", "–Å–ª–∫–∞"),
    ("–ë–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π ‚Äî –ø–æ–ª–Ω–∞ –≥–æ—Ä–Ω–∏—Ü–∞ –ª—é–¥–µ–π. –ß—Ç–æ —ç—Ç–æ?", "–û–≥—É—Ä–µ—Ü"),
    ("–í–∏—Å–∏—Ç –≥—Ä—É—à–∞ ‚Äî –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å. –ß—Ç–æ —ç—Ç–æ?", "–õ–∞–º–ø–æ—á–∫–∞"),
]

# === –ñ–ò–í–û–¢–ù–´–ï ===
animals = ["–ö–æ—à–∫–∞ üê±", "–°–æ–±–∞–∫–∞ üê∂", "–ó–∞—è—Ü üêá", "–õ–µ–≤ ü¶Å", "–°–ª–æ–Ω üêò", "–ú–µ–¥–≤–µ–¥—å üêª", "–ü–∏–Ω–≥–≤–∏–Ω üêß", "–ö—Ä–æ–∫–æ–¥–∏–ª üêä"]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä
current_games = {}

# === –ú–ï–ù–Æ ===
def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="guessnum")],
        [InlineKeyboardButton(text="üìñ –°–∫–∞–∑–∫–∞", callback_data="fairytale")],
        [InlineKeyboardButton(text="üòÜ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–≥–∞–¥–∫–∞", callback_data="riddle")],
        [InlineKeyboardButton(text="üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz")],
        [InlineKeyboardButton(text="‚úä‚úåÔ∏è‚úã –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data="rps")],
        [InlineKeyboardButton(text="üêæ –£–≥–∞–¥–∞–π –∂–∏–≤–æ—Ç–Ω–æ–µ", callback_data="animal")],
        [InlineKeyboardButton(text="‚ûï‚ûñ‚úñÔ∏è –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–ª–ª–µ–Ω–¥–∂", callback_data="math")],
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –æ—á–∫–∏", callback_data="points")],
        [InlineKeyboardButton(text="üë§ –ö—Ç–æ —è", callback_data="whoami")],
        [InlineKeyboardButton(text="üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –î–†?", callback_data="birthday")],
    ])
    return kb

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ])

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ user_id ===
def get_child(user_id: int):
    for name, data in users.items():
        if data["id"] == user_id:
            return name
    return None

# === –°–¢–ê–†–¢ ===
@dp.message(F.text == "/start")
async def start(message: Message):
    child = get_child(message.from_user.id)
    if child:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {child}! üëã\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:", reply_markup=main_menu())
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üö´ –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")

# === –ù–ê–ó–ê–î ===
@dp.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# === –ê–ù–ï–ö–î–û–¢ ===
@dp.callback_query(F.data == "joke")
async def send_joke(callback: CallbackQuery):
    await callback.message.edit_text(random.choice(jokes), reply_markup=back_menu())

# === –°–ö–ê–ó–ö–ê ===
@dp.callback_query(F.data == "fairytale")
async def send_fairytale(callback: CallbackQuery):
    await callback.message.edit_text(random.choice(fairytales), reply_markup=back_menu())

# === –ó–ê–ì–ê–î–ö–ê ===
@dp.callback_query(F.data == "riddle")
async def send_riddle(callback: CallbackQuery):
    question, answer = random.choice(riddles)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"riddle_answer:{answer}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await callback.message.edit_text(question, reply_markup=kb)

@dp.callback_query(F.data.startswith("riddle_answer"))
async def riddle_answer(callback: CallbackQuery):
    await callback.message.edit_text(f"–û—Ç–≤–µ—Ç: {callback.data.split(':')[1]}", reply_markup=back_menu())

# === –£–ì–ê–î–ê–ô –ß–ò–°–õ–û ===
@dp.callback_query(F.data == "guessnum")
async def guessnum_start(callback: CallbackQuery):
    number = random.randint(1, 10)
    uid = callback.from_user.id
    current_games.setdefault(uid, {})
    current_games[uid]['guessnum'] = number
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"guess:{i}") for i in range(1, 6)],
        [InlineKeyboardButton(text=str(i), callback_data=f"guess:{i}") for i in range(6, 11)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await callback.message.edit_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!", reply_markup=kb)

@dp.callback_query(F.data.startswith("guess:"))
async def guessnum_check(callback: CallbackQuery):
    uid = callback.from_user.id
    number = current_games.get(uid, {}).get("guessnum", None)
    choice = int(callback.data.split(":")[1])
    if number is None:
        # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        await callback.message.edit_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'.", reply_markup=main_menu())
        return

    if choice == number:
        await callback.message.edit_text(f"üéâ –ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ {number}!", reply_markup=back_menu())
        # –æ—á–∏—â–∞–µ–º –∏–≥—Ä—É
        current_games[uid].pop('guessnum', None)
    else:
        # –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(i), callback_data=f"guess:{i}") for i in range(1, 6)],
            [InlineKeyboardButton(text=str(i), callback_data=f"guess:{i}") for i in range(6, 11)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await callback.message.edit_text(f"–ù–µ—Ç üòÖ –≠—Ç–æ –Ω–µ {choice}. –ü–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑!", reply_markup=kb)

# === –í–ò–ö–¢–û–†–ò–ù–ê ===
@dp.callback_query(F.data == "quiz")
async def quiz_start(callback: CallbackQuery):
    user_id = callback.from_user.id
    asked_questions[user_id] = []
    current_games.setdefault(user_id, {})
    await ask_question(callback.message, user_id)

async def ask_question(message: Message, user_id: int):
    available = [q for q in quiz_questions if q not in asked_questions[user_id]]
    if not available:
        await message.edit_text("–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ", reply_markup=back_menu())
        # –æ—á–∏—Å—Ç–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        current_games.get(user_id, {}).pop('quiz', None)
        return
    question, options, correct = random.choice(available)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–æ–ø—Ä–æ—Å-—Å—Ç—Ä–æ–∫—É –≤ current_games, –Ω–æ –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
    current_games.setdefault(user_id, {})
    current_games[user_id]['quiz'] = (question, options, correct)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=opt, callback_data=f"quiz_answer:{opt}:{correct}")]
                         for opt in options] +
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    )
    await message.edit_text(f"‚ùì {question}", reply_markup=kb)

@dp.callback_query(F.data.startswith("quiz_answer"))
async def quiz_answer(callback: CallbackQuery):
    parts = callback.data.split(":")
    # —Ñ–æ—Ä–º–∞—Ç: quiz_answer:{opt}:{correct}
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    _, answer, correct = parts
    uid = callback.from_user.id
    child = get_child(uid)

    # –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
    qdata = current_games.get(uid, {}).get('quiz', None)
    if qdata is None:
        await callback.message.edit_text("–í–æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–∂–º–∏ '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
        return

    question, options, correct_saved = qdata

    if answer == correct:
        # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏, –ø–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π –∏ –¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π
        if child:
            users[child]["points"] += 1
        # –ø–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π (—á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è)
        asked_questions.setdefault(uid, []).append(qdata)
        # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        current_games[uid].pop('quiz', None)
        await ask_question(callback.message, uid)
    else:
        # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—É–º–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=opt, callback_data=f"quiz_answer:{opt}:{correct_saved}")]
                             for opt in options] +
                            [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        )
        name_part = f", {child}" if child else ""
        await callback.message.edit_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ{name_part}! –ü–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb)

# === –ö–ê–ú–ï–ù–¨-–ù–û–ñ–ù–ò–¶–´-–ë–£–ú–ê–ì–ê ===
@dp.callback_query(F.data == "rps")
async def rps_start(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data="rps:–∫–∞–º–µ–Ω—å"),
         InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps:–Ω–æ–∂–Ω–∏—Ü—ã"),
         InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data="rps:–±—É–º–∞–≥–∞")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π! ‚úä‚úåÔ∏è‚úã", reply_markup=kb)

@dp.callback_query(F.data.startswith("rps:"))
async def rps_play(callback: CallbackQuery):
    player = callback.data.split(":")[1]
    bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
    if player == bot_choice:
        result = "–ù–∏—á—å—è!"
    elif (player == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
         (player == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or \
         (player == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
        result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª üéâ"
    else:
        result = "–Ø –≤—ã–∏–≥—Ä–∞–ª üòé"
    await callback.message.edit_text(f"–¢—ã –≤—ã–±—Ä–∞–ª {player}, —è –≤—ã–±—Ä–∞–ª {bot_choice}. {result}", reply_markup=back_menu())

# === –£–ì–ê–î–ê–ô –ñ–ò–í–û–¢–ù–û–ï ===
@dp.callback_query(F.data == "animal")
async def animal_start(callback: CallbackQuery):
    correct = random.choice(animals)
    uid = callback.from_user.id
    current_games.setdefault(uid, {})
    current_games[uid]['animal'] = {}
    options = random.sample(animals, 3)
    if correct not in options:
        options[0] = correct
    random.shuffle(options)
    current_games[uid]['animal']['correct'] = correct
    current_games[uid]['animal']['options'] = options

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=a, callback_data=f"animal:{a}:{correct}")] for a in options
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
    await callback.message.edit_text("–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è –∑–∞–≥–∞–¥–∞–ª? üêæ", reply_markup=kb)

@dp.callback_query(F.data.startswith("animal:"))
async def animal_check(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    _, choice, correct = parts
    uid = callback.from_user.id
    state = current_games.get(uid, {}).get('animal', None)
    if state is None:
        await callback.message.edit_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ '–£–≥–∞–¥–∞–π –∂–∏–≤–æ—Ç–Ω–æ–µ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_menu())
        return

    if choice == correct:
        await callback.message.edit_text(f"üéâ –í–µ—Ä–Ω–æ! –≠—Ç–æ {correct}", reply_markup=back_menu())
        current_games[uid].pop('animal', None)
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏
        options = state['options']
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=a, callback_data=f"animal:{a}:{state['correct']}")] for a in options
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await callback.message.edit_text("‚ùå –ù–µ—Ç! –ü–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb)

# === –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ß–ï–õ–õ–ï–ù–î–ñ ===
@dp.callback_query(F.data == "math")
async def math_start(callback: CallbackQuery):
    await send_math_task(callback.message, callback.from_user.id)

async def send_math_task(message: Message, user_id: int):
    a, b = random.randint(1, 10), random.randint(1, 10)
    op = random.choice(["+", "-", "√ó"])
    if op == "+":
        correct = a + b
    elif op == "-":
        correct = a - b
    else:
        correct = a * b
    options = [correct, correct + 1, correct - 1, random.randint(1, 20)]
    random.shuffle(options)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_games.setdefault(user_id, {})
    current_games[user_id]['math'] = {"a": a, "b": b, "op": op, "correct": correct, "options": options}

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(opt), callback_data=f"math_answer:{opt}:{correct}")] for opt in options
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
    await message.edit_text(f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} {op} {b}?", reply_markup=kb)

@dp.callback_query(F.data.startswith("math_answer"))
async def math_answer(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    _, answer, correct_str = parts
    uid = callback.from_user.id
    child = get_child(uid)
    state = current_games.get(uid, {}).get('math', None)
    if state is None:
        await callback.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–∂–º–∏ '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–ª–ª–µ–Ω–¥–∂' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_menu())
        return

    if answer == str(state['correct']):
        if child:
            users[child]["points"] += 1
        # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        current_games[uid].pop('math', None)
        await send_math_task(callback.message, uid)
    else:
        # –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ –∑–∞–¥–∞—á—É
        a, b, op = state['a'], state['b'], state['op']
        options = state['options']
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(opt), callback_data=f"math_answer:{opt}:{state['correct']}")] for opt in options
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await callback.message.edit_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑.\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} {op} {b}?", reply_markup=kb)

# === –û–ß–ö–ò ===
@dp.callback_query(F.data == "points")
async def show_points(callback: CallbackQuery):
    child = get_child(callback.from_user.id)
    await callback.message.edit_text(f"{child}, —É —Ç–µ–±—è {users[child]['points']} –æ—á–∫–æ–≤ üèÜ", reply_markup=back_menu())

# === –ö–¢–û –Ø ===
@dp.callback_query(F.data == "whoami")
async def whoami(callback: CallbackQuery):
    child = get_child(callback.from_user.id)
    data = users[child]
    text = f"üë§ –ò–º—è: {child}\nüéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthday']}\nüèÜ –û—á–∫–∏: {data['points']}"
    await callback.message.edit_text(text, reply_markup=back_menu())

# === –°–ö–û–õ–¨–ö–û –î–ù–ï–ô –î–û –î–† ===
def days_until(date_str):
    bday = datetime.strptime(date_str, "%Y-%m-%d").date()
    today = datetime.today().date()
    next_bday = bday.replace(year=today.year)
    if next_bday < today:
        next_bday = next_bday.replace(year=today.year + 1)
    return (next_bday - today).days

@dp.callback_query(F.data == "birthday")
async def birthday(callback: CallbackQuery):
    child = get_child(callback.from_user.id)
    days = days_until(users[child]["birthday"])
    await callback.message.edit_text(f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {child} –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π üéâ", reply_markup=back_menu())

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
